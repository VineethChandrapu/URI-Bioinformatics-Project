# Make a Matrix:
coords_mat <- as.matrix(coords_df)
# ---------- Read In and Organize Data to Be Used ----------
# Make a Dataframe:
# REPLACE WITH ACTUAL DATA (needs to be read into data frame)
df <- data.frame(
AA <- c("AA1", "AA1", "AA3"),
Atom <- c("a1", "a2", "a1"),
Mut <- c(TRUE, FALSE, TRUE), # I don't know how mutations are indicated right now
x <- c(3, 4, 5),
y <- c(7, 9, 3),
z <- c(2, 8, 1)
)
colnames(df) <- c("AminoAcid", "Atom", "Mutation?", "X", "Y", "Z")
df
# Dataframe of mutation points
mut_df <- df[df$Mut == TRUE,]
mut_df
# Make a Matrix:
coords_mat <- as.matrix(coords_df)
# Make a Matrix:
coords_df <- df[x,y,z]
# Make a Matrix:
coords_df <- df[df$x, df$y, df$z]
# ---------- Read In and Organize Data to Be Used ----------
# Make a Dataframe:
# REPLACE WITH ACTUAL DATA (needs to be read into data frame)
df <- data.frame(
AA <- c("AA1", "AA1", "AA3"),
Atom <- c("a1", "a2", "a1"),
Mut <- c(TRUE, FALSE, TRUE), # I don't know how mutations are indicated right now
x <- c(3, 4, 5),
y <- c(7, 9, 3),
z <- c(2, 8, 1)
)
colnames(df) <- c("AminoAcid", "Atom", "Mutation?", "X", "Y", "Z")
df
# Dataframe of mutation points
mut_df <- df[df$Mut == TRUE,]
mut_df
# Make a Matrix:
coords_df <- df[df$x, df$y, df$z]
# Make a Matrix:
coords_df <- subset(df, select=c('x', 'y', 'z'))
# Make a Matrix:
coords_df <- subset(df, select=c('X', 'Y', 'Z'))
coords_mat <- as.matrix(coords_df)
rownames(coords_mat) <- c("Atom1", "Atom2", "Atom3") #REPLACE WITH ROW NAMES VECTOR
coords_mat
dist_mat <- dist(coords_mat, method = "euclidean", diag = TRUE, upper = FALSE)
dist_mat
for AA in df$AminoAcid;
# Make Matrices for each Amino Acid:
for (AA in df$AminoAcid)
{
coords_df <- subset(df, AminoAcid == AA, select=c('X', 'Y', 'Z'))
coords_mat <- as.matrix(coords_df)
rownames(coords_mat) <- c("Atom1", "Atom2", "Atom3") #REPLACE WITH ROW NAMES VECTOR
coords_mat
dist_mat <- dist(coords_mat, method = "euclidean", diag = TRUE, upper = FALSE)
dist_mat
}
install.packages("tidyverse")
library(tidyverse)
# Make Matrices for each Amino Acid:
for (AA in df$AminoAcid)
{
coords_df <- subset(df, AminoAcid == AA, select=c('X', 'Y', 'Z'))
coords_mat <- as.matrix(coords_df)
rownames(coords_mat) <- c("Atom1", "Atom2", "Atom3") #REPLACE WITH ROW NAMES VECTOR
coords_mat
dist_mat <- dist(coords_mat, method = "euclidean", diag = TRUE, upper = FALSE)
dist_mat
}
coords_df <- subset(df, AminoAcid == AA1, select=c('X', 'Y', 'Z'))
# Make Matrices for each Amino Acid:
coords_df <- subset(df, select=c('X', 'Y', 'Z'))
coords_mat <- as.matrix(coords_df)
rownames(coords_mat) <- c("Atom1", "Atom2", "Atom3") #REPLACE WITH ROW NAMES VECTOR
coords_mat
dist_mat <- dist(coords_mat, method = "euclidean", diag = TRUE, upper = FALSE)
dist_mat
rownames(coords_mat) <- c(df$Atom) #REPLACE WITH ROW NAMES VECTOR
coords_mat
dist_mat <- dist(coords_mat, method = "euclidean", diag = TRUE, upper = FALSE)
dist_mat
# ---------- Read In and Organize Data to Be Used ----------
# Make a Dataframe:
# REPLACE WITH ACTUAL DATA (needs to be read into data frame)
df <- data.frame(
AA <- c("AA1", "AA1", "AA1", "AA2", "AA2", "AA3", "AA3", "AA3"),
Atom <- c("a1", "a2", "a3", "a1", "a2", "a1", "a2", "a3"),
Mut <- c(TRUE, FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, TRUE), # I don't know how mutations are indicated right now
x <- c(3, 4, 5, 4, 7, 2, 8, 5),
y <- c(7, 9, 3, 7, 5, 7, 2, 4),
z <- c(2, 8, 1, 6, 9, 3, 1, 7)
)
colnames(df) <- c("AminoAcid", "Atom", "Mutation?", "X", "Y", "Z")
df
# Make Matrices for each Amino Acid: (DOESN'T WORK RN)
for (AA in df$AminoAcid)
{
coords_df <- subset(df, AminoAcid == AA, select=c('X', 'Y', 'Z'))
coords_mat <- as.matrix(coords_df)
rownames(coords_mat) <- c(df$Atom) #REPLACE WITH ROW NAMES VECTOR
coords_mat
dist_mat <- dist(coords_mat, method = "euclidean", diag = TRUE, upper = FALSE)
dist_mat
}
help(subset)
# Find distance between 2 amino acids:
grouped <- df %>%
group_by(AminoAcid) %>%
group_split()
grouped
library(dplyr)
library(purrr)
list_of_AA_df <- tibble(
grouped <- df %>%
group_by(AminoAcid) %>%
group_split()
data = list(
# Find distance between 2 amino acids:
grouped <- df %>%
group_by(AminoAcid) %>%
nest()
grouped
# Calculate distances using dplyr
df_with_id <- grouped_by_AA %>%
mutate(id = row_number())
grouped_by_AA <- df %>%
group_by(AminoAcid) %>%
nest()
grouped_by_AA
# Construct pairwise matrices for all amino acids:
# Calculate distances using dplyr
df_with_id <- grouped_by_AA %>%
mutate(id = row_number())
distances_df_dplyr <- df_with_id %>%
rowwise() %>%
mutate(distance = sqrt((x.x - x.y)^2 + (y.x - y.y)^2 + (z.x - z.y)^2)) %>%
ungroup() %>%
pivot_wider(names_from = id2, values_from = distance, names_prefix = "point_df2_")
df_with_id <- grouped_by_AA %>%
mutate(id = row_number())
df_with_id
grouped_by_AA[2]
grouped_by_AA
# Construct pairwise matrices for all amino acids:
help(pluck)
# Construct pairwise matrices for all amino acids:
pluck(grouped_by_AA, AA1)
# Construct pairwise matrices for all amino acids:
pluck(grouped_by_AA, 1)
# Construct pairwise matrices for all amino acids:
pluck(grouped_by_AA, 1, byrow = TRUE)
# Construct pairwise matrices for all amino acids:
help(pull)
# Construct pairwise matrices for all amino acids:
just_AA2 <- grouped_by_AA$AminoAcid[[AA2]]
# Construct pairwise matrices for all amino acids:
just_AA2 <- grouped_by_AA$data[[2]]
print(just_AA2)
grouped_by_AA <- df %>%
df$`Mutation?` <- NULL %>%
group_by(AminoAcid) %>%
nest()
df$`Mutation?` <- NULL
grouped_by_AA <- df %>%
group_by(AminoAcid) %>%
nest()
grouped_by_AA
# Find distance between 2 amino acids:
# Group the data:
location_df <- df[-df$`Mutation?`]
# Find distance between 2 amino acids:
# Group the data:
location_df <- df[,-3]
grouped_by_AA
# Construct pairwise matrices for all amino acids:
just_AA2 <- grouped_by_AA$data[[2]]
print(just_AA2)
for(i in grouped_by_AA$data -1) {
for(i in 2:grouped_by_AA$data) {
distances <- matrix(NA, nrow = nrow(grouped_by_AA$data[[i-1]]), ncol = nrow(grouped_by_AA$data[[i]]))
euclidean_distance <- function(point1, point2) {
sqrt(sum((point1 - point2)^2))
for(i in 2:grouped_by_AA$data) {
distances <- matrix(NA, nrow = nrow(grouped_by_AA$data[[i-1]]), ncol = nrow(grouped_by_AA$data[[i]]))
distances[i, j] <- euclidean_distance(
c(grouped_by_AA$data[[i-1]]$X[i], grouped_by_AA$data[[i-1]]$Y[i], grouped_by_AA$data[[i-1]]$Z[i]),
c(grouped_by_AA$data[[i]]$X[j], grouped_by_AA$data[[i]]$Y[j], grouped_by_AA$data[[i]]$Z[j])
)
}
for(i in 2:grouped_by_AA$data) {
distances <- matrix(NA, nrow = nrow(grouped_by_AA$data[[i-1]]), ncol = nrow(grouped_by_AA$data[[i]]))
distances[i, j] <- euclidean_distance(
c(grouped_by_AA$data[[i-1]]$X[i], grouped_by_AA$data[[i-1]]$Y[i], grouped_by_AA$data[[i-1]]$Z[i]),
c(grouped_by_AA$data[[i]]$X[j], grouped_by_AA$data[[i]]$Y[j], grouped_by_AA$data[[i]]$Z[j])
)
print(distances)
}
for(i in 2:grouped_by_AA$data) {
distances <- matrix(NA, nrow = nrow(grouped_by_AA$data[[i-1]]), ncol = nrow(grouped_by_AA$data[[i]]))
distances[i, j] <- euclidean_distance(
c(grouped_by_AA$data[[i-1]]$X[i], grouped_by_AA$data[[i-1]]$Y[i], grouped_by_AA$data[[i-1]]$Z[i]),
c(grouped_by_AA$data[[i]]$X[j], grouped_by_AA$data[[i]]$Y[j], grouped_by_AA$data[[i]]$Z[j])
)
print(distances)
}
euclidean_distance <- function(point1, point2) {
sqrt(sum((point1 - point2)^2))
}
just_AA2 <- grouped_by_AA$data[[2]]
print(just_AA2)
for(i in 2:grouped_by_AA$data) {
distances <- matrix(NA, nrow = nrow(grouped_by_AA$data[[i-1]]), ncol = nrow(grouped_by_AA$data[[i]]))
distances[i, j] <- euclidean_distance(
c(grouped_by_AA$data[[i-1]]$X[i], grouped_by_AA$data[[i-1]]$Y[i], grouped_by_AA$data[[i-1]]$Z[i]),
c(grouped_by_AA$data[[i]]$X[j], grouped_by_AA$data[[i]]$Y[j], grouped_by_AA$data[[i]]$Z[j])
)
print(distances)
}
for(i in 2:grouped_by_AA$data) {
distances <- matrix(NA, nrow = nrow(grouped_by_AA$data[[i-1]]), ncol = nrow(grouped_by_AA$data[[i]]))
distances[i, j] <- euclidean_distance(
c(grouped_by_AA$data[[i-1]]$X[i], grouped_by_AA$data[[i-1]]$Y[i], grouped_by_AA$data[[i-1]]$Z[i]),
c(grouped_by_AA$data[[i]]$X[j], grouped_by_AA$data[[i]]$Y[j], grouped_by_AA$data[[i]]$Z[j])
)
assign(i, data.frame(split(dat[[i]], rep(letters[1:5], each = 3))))
print(distances)
}
nrow(grouped_by_AA$data[[1]])
print(nrow(grouped_by_AA$data[[1]]))
nrow(grouped_by_AA$data[[1]])
location_df <- df[,-3]
grouped_by_AA <- df %>%
group_by(AminoAcid) %>%
nest()
grouped_by_AA
