group_by(AminoAcid) %>%
nest()
df$`Mutation?` <- NULL
grouped_by_AA <- df %>%
group_by(AminoAcid) %>%
nest()
grouped_by_AA
# Find distance between 2 amino acids:
# Group the data:
location_df <- df[-df$`Mutation?`]
# Find distance between 2 amino acids:
# Group the data:
location_df <- df[,-3]
grouped_by_AA
# Construct pairwise matrices for all amino acids:
just_AA2 <- grouped_by_AA$data[[2]]
print(just_AA2)
for(i in grouped_by_AA$data -1) {
for(i in 2:grouped_by_AA$data) {
distances <- matrix(NA, nrow = nrow(grouped_by_AA$data[[i-1]]), ncol = nrow(grouped_by_AA$data[[i]]))
euclidean_distance <- function(point1, point2) {
sqrt(sum((point1 - point2)^2))
for(i in 2:grouped_by_AA$data) {
distances <- matrix(NA, nrow = nrow(grouped_by_AA$data[[i-1]]), ncol = nrow(grouped_by_AA$data[[i]]))
distances[i, j] <- euclidean_distance(
c(grouped_by_AA$data[[i-1]]$X[i], grouped_by_AA$data[[i-1]]$Y[i], grouped_by_AA$data[[i-1]]$Z[i]),
c(grouped_by_AA$data[[i]]$X[j], grouped_by_AA$data[[i]]$Y[j], grouped_by_AA$data[[i]]$Z[j])
)
}
for(i in 2:grouped_by_AA$data) {
distances <- matrix(NA, nrow = nrow(grouped_by_AA$data[[i-1]]), ncol = nrow(grouped_by_AA$data[[i]]))
distances[i, j] <- euclidean_distance(
c(grouped_by_AA$data[[i-1]]$X[i], grouped_by_AA$data[[i-1]]$Y[i], grouped_by_AA$data[[i-1]]$Z[i]),
c(grouped_by_AA$data[[i]]$X[j], grouped_by_AA$data[[i]]$Y[j], grouped_by_AA$data[[i]]$Z[j])
)
print(distances)
}
for(i in 2:grouped_by_AA$data) {
distances <- matrix(NA, nrow = nrow(grouped_by_AA$data[[i-1]]), ncol = nrow(grouped_by_AA$data[[i]]))
distances[i, j] <- euclidean_distance(
c(grouped_by_AA$data[[i-1]]$X[i], grouped_by_AA$data[[i-1]]$Y[i], grouped_by_AA$data[[i-1]]$Z[i]),
c(grouped_by_AA$data[[i]]$X[j], grouped_by_AA$data[[i]]$Y[j], grouped_by_AA$data[[i]]$Z[j])
)
print(distances)
}
euclidean_distance <- function(point1, point2) {
sqrt(sum((point1 - point2)^2))
}
just_AA2 <- grouped_by_AA$data[[2]]
print(just_AA2)
for(i in 2:grouped_by_AA$data) {
distances <- matrix(NA, nrow = nrow(grouped_by_AA$data[[i-1]]), ncol = nrow(grouped_by_AA$data[[i]]))
distances[i, j] <- euclidean_distance(
c(grouped_by_AA$data[[i-1]]$X[i], grouped_by_AA$data[[i-1]]$Y[i], grouped_by_AA$data[[i-1]]$Z[i]),
c(grouped_by_AA$data[[i]]$X[j], grouped_by_AA$data[[i]]$Y[j], grouped_by_AA$data[[i]]$Z[j])
)
print(distances)
}
for(i in 2:grouped_by_AA$data) {
distances <- matrix(NA, nrow = nrow(grouped_by_AA$data[[i-1]]), ncol = nrow(grouped_by_AA$data[[i]]))
distances[i, j] <- euclidean_distance(
c(grouped_by_AA$data[[i-1]]$X[i], grouped_by_AA$data[[i-1]]$Y[i], grouped_by_AA$data[[i-1]]$Z[i]),
c(grouped_by_AA$data[[i]]$X[j], grouped_by_AA$data[[i]]$Y[j], grouped_by_AA$data[[i]]$Z[j])
)
assign(i, data.frame(split(dat[[i]], rep(letters[1:5], each = 3))))
print(distances)
}
nrow(grouped_by_AA$data[[1]])
print(nrow(grouped_by_AA$data[[1]]))
nrow(grouped_by_AA$data[[1]])
location_df <- df[,-3]
grouped_by_AA <- df %>%
group_by(AminoAcid) %>%
nest()
grouped_by_AA
if(!require(dplyr)){install.packages("dplyr")}
if(!require(dplyr)){install.packages("tidyverse")}
if(!require(dplyr)){install.packages("purrr")}
library(tidyverse)
library(dplyr)
library(purrr)
# ---------- Read In and Organize Data to Be Used ----------
# Make a Dataframe:
# REPLACE WITH ACTUAL DATA (needs to be read into data frame)
df <- data.frame(
AA <- c("AA1", "AA1", "AA1", "AA2", "AA2", "AA3", "AA3", "AA3"),
Atom <- c("a1", "a2", "a3", "a1", "a2", "a1", "a2", "a3"),
Mut <- c(TRUE, FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, TRUE), # I don't know how mutations are indicated right now
x <- c(3, 4, 5, 4, 7, 2, 8, 5),
y <- c(7, 9, 3, 7, 5, 7, 2, 4),
z <- c(2, 8, 1, 6, 9, 3, 1, 7)
)
colnames(df) <- c("AminoAcid", "Atom", "Mutation?", "X", "Y", "Z")
df
knitr::opts_chunk$set(echo = TRUE)
df <- data.frame(
AA <- c("AA1", "AA1", "AA1", "AA2", "AA2", "AA3", "AA3", "AA3"),
Atom <- c("a1", "a2", "a3", "a1", "a2", "a1", "a2", "a3"),
Mut <- c(TRUE, FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, TRUE), # I don't know how mutations are indicated right now
x <- c(3, 4, 5, 4, 7, 2, 8, 5),
y <- c(7, 9, 3, 7, 5, 7, 2, 4),
z <- c(2, 8, 1, 6, 9, 3, 1, 7)
)
colnames(df) <- c("AminoAcid", "Atom", "Mutation?", "X", "Y", "Z")
df
if(!require(dplyr)){install.packages("dplyr")}
if(!require(dplyr)){install.packages("tidyverse")}
if(!require(dplyr)){install.packages("purrr")}
library(tidyverse)
library(dplyr)
library(purrr)
# ---------- Libraries ----------
if(!require(dplyr)){install.packages("dplyr")}
if(!require(dplyr)){install.packages("tidyverse")}
if(!require(dplyr)){install.packages("purrr")}
library(tidyverse)
library(dplyr)
library(purrr)
# ---------- Read In and Organize Data to Be Used ----------
# Create a fake data frame for testing
df <- data.frame(
AA <- c("AA1", "AA1", "AA1", "AA2", "AA2", "AA3", "AA3", "AA3"),
Atom <- c("a1", "a2", "a3", "a1", "a2", "a1", "a2", "a3"),
Mut <- c(TRUE, FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, TRUE), # I don't know how mutations are indicated right now
x <- c(3, 4, 5, 4, 7, 2, 8, 5),
y <- c(7, 9, 3, 7, 5, 7, 2, 4),
z <- c(2, 8, 1, 6, 9, 3, 1, 7)
)
colnames(df) <- c("AminoAcid", "Atom", "Mutation?", "X", "Y", "Z")
df
# Dataframe of mutated points only:
mut_df <- df[df$Mut == TRUE,]
# ---------- Part 1: Construct a Distance Matrix of ALL Amino Acids ----------
# Input: dataframe of all amino acids, atoms, and coordinates
# Output: matrix with minimum pairwise distance between each amino acid
# XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
# Make Matrices for each Amino Acid: (DOESN'T WORK RN)
for (AA in df$AminoAcid)
{
coords_df <- subset(df, AminoAcid == AA, select=c('X', 'Y', 'Z'))
coords_mat <- as.matrix(coords_df)
rownames(coords_mat) <- c(df$Atom) #REPLACE WITH ROW NAMES VECTOR
coords_mat
dist_mat <- dist(coords_mat, method = "euclidean", diag = TRUE, upper = FALSE)
dist_mat
}
# XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
# Make Matrices for each Amino Acid: (DOESN'T WORK RN)
# for (AA in df$AminoAcid)
{
coords_df <- subset(df, AminoAcid == AA, select=c('X', 'Y', 'Z'))
coords_mat <- as.matrix(coords_df)
rownames(coords_mat) <- c(df$Atom) #REPLACE WITH ROW NAMES VECTOR
coords_mat
dist_mat <- dist(coords_mat, method = "euclidean", diag = TRUE, upper = FALSE)
dist_mat
}
# ---------- Part 1: Construct a Distance Matrix of ALL Amino Acids ----------
# Input: dataframe of all amino acids, atoms, and coordinates
# Output: matrix with minimum pairwise distance between each amino acid
# XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
# Make Matrices for each Amino Acid: (DOESN'T WORK RN)
#for (AA in df$AminoAcid)
#  {
#    coords_df <- subset(df, AminoAcid == AA, select=c('X', 'Y', 'Z'))
#
#    coords_mat <- as.matrix(coords_df)
#    rownames(coords_mat) <- c(df$Atom) #REPLACE WITH ROW NAMES VECTOR
#    coords_mat
#
#    dist_mat <- dist(coords_mat, method = "euclidean", diag = TRUE, upper = FALSE)
#    dist_mat
#}
# XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
# Find distance between every 2 amino acids:
# Group the data {use: grouped_by_AA}
location_df <- df[,-3]
grouped_by_AA <- df %>%
group_by(AminoAcid) %>%
nest()
grouped_by_AA
# Euclidean function {use: euclidean_distance[i, j] }
euclidean_distance <- function(point1, point2) {
sqrt(sum((point1 - point2)^2))
}
# How to use just one dataframe:
just_AA2 <- grouped_by_AA$data[[2]]
print(just_AA2)
for(i in 2:grouped_by_AA$data) {
distances <- matrix(NA, nrow = nrow(grouped_by_AA$data[[i-1]]), ncol = nrow(grouped_by_AA$data[[i]]))
distances[i, j] <- euclidean_distance(
c(grouped_by_AA$data[[i-1]]$X[i], grouped_by_AA$data[[i-1]]$Y[i], grouped_by_AA$data[[i-1]]$Z[i]),
c(grouped_by_AA$data[[i]]$X[j], grouped_by_AA$data[[i]]$Y[j], grouped_by_AA$data[[i]]$Z[j])
)
assign(i, data.frame(split(dat[[i]], rep(letters[1:5], each = 3))))
print(distances)
}
for(i in 2:length(grouped_by_AA$data))
{
distances <- matrix(NA, nrow = nrow(grouped_by_AA$data[[i-1]]), ncol = nrow(grouped_by_AA$data[[i]]))
distances[i, j] <- euclidean_distance(
c(grouped_by_AA$data[[i-1]]$X[i], grouped_by_AA$data[[i-1]]$Y[i], grouped_by_AA$data[[i-1]]$Z[i]),
c(grouped_by_AA$data[[i]]$X[j], grouped_by_AA$data[[i]]$Y[j], grouped_by_AA$data[[i]]$Z[j])
)
assign(i, data.frame(split(dat[[i]], rep(letters[1:5], each = 3))))
print(distances)
}
for(i in 2:length(grouped_by_AA$data))
{
distances <- matrix(NA, nrow = nrow(grouped_by_AA$data[[i-1]]), ncol = nrow(grouped_by_AA$data[[i]]))
distances[i, j] <- euclidean_distance(
c(grouped_by_AA$data[[i-1]]$X[i], grouped_by_AA$data[[i-1]]$Y[i], grouped_by_AA$data[[i-1]]$Z[i]),
c(grouped_by_AA$data[[i]]$X[j], grouped_by_AA$data[[i]]$Y[j], grouped_by_AA$data[[i]]$Z[j])
)
#assign(i, data.frame(split(dat[[i]], rep(letters[1:5], each = 3))))
print(distances)
}
for(i,j in 2:length(grouped_by_AA$data))
for(i in 2:length(grouped_by_AA$data))
{
for (j in 2:length(grouped_by_AA$data))
{
distances <- matrix(NA, nrow = nrow(grouped_by_AA$data[[i-1]]), ncol = nrow(grouped_by_AA$data[[i]]))
distances[i, j] <- euclidean_distance(
c(grouped_by_AA$data[[i-1]]$X[i], grouped_by_AA$data[[i-1]]$Y[i], grouped_by_AA$data[[i-1]]$Z[i]),
c(grouped_by_AA$data[[i]]$X[j], grouped_by_AA$data[[i]]$Y[j], grouped_by_AA$data[[i]]$Z[j])
)
#assign(i, data.frame(split(dat[[i]], rep(letters[1:5], each = 3))))
print(distances)
}
}
for(i in 2:length(grouped_by_AA$data))
{
for (j in 2:length(grouped_by_AA$data))
{
distances <- matrix(NA, nrow = nrow(grouped_by_AA$data[[i-1]]), ncol = ncol(grouped_by_AA$data[[i]]))
distances[i, j] <- euclidean_distance(
c(grouped_by_AA$data[[i-1]]$X[i], grouped_by_AA$data[[i-1]]$Y[i], grouped_by_AA$data[[i-1]]$Z[i]),
c(grouped_by_AA$data[[i]]$X[j], grouped_by_AA$data[[i]]$Y[j], grouped_by_AA$data[[i]]$Z[j])
)
#assign(i, data.frame(split(dat[[i]], rep(letters[1:5], each = 3))))
print(distances)
}
}
# Find distance between every 2 amino acids:
# Group the data {use: grouped_by_AA}
location_df <- df[,-3]
grouped_by_AA <- df %>%
group_by(AminoAcid) %>%
nest()
grouped_by_AA
# Euclidean function {use: euclidean_distance[i, j] }
euclidean_distance <- function(point1, point2) {
sqrt(sum((point1 - point2)^2))
}
# How to use just one dataframe:
just_AA2 <- grouped_by_AA$data[[2]]
#
for(i in 2:length(grouped_by_AA$data))
{
for (j in 2:length(grouped_by_AA$data))
{
distances <- matrix(NA, nrow = nrow(grouped_by_AA$data[[i-1]]), ncol = ncol(grouped_by_AA$data[[i]]))
distances[i, j] <- euclidean_distance(
c(grouped_by_AA$data[[i-1]]$X[i], grouped_by_AA$data[[i-1]]$Y[i], grouped_by_AA$data[[i-1]]$Z[i]),
c(grouped_by_AA$data[[i]]$X[j], grouped_by_AA$data[[i]]$Y[j], grouped_by_AA$data[[i]]$Z[j])
)
#assign(i, data.frame(split(dat[[i]], rep(letters[1:5], each = 3))))
print(distances)
}
}
#
for(i in grouped_by_AA$data)
{
for (j in grouped_by_AA$data)
{
distances <- matrix(NA, nrow = nrow(grouped_by_AA$data[[i-1]]), ncol = ncol(grouped_by_AA$data[[i]]))
distances[i, j] <- euclidean_distance(
c(grouped_by_AA$data[[i-1]]$X[i], grouped_by_AA$data[[i-1]]$Y[i], grouped_by_AA$data[[i-1]]$Z[i]),
c(grouped_by_AA$data[[i]]$X[j], grouped_by_AA$data[[i]]$Y[j], grouped_by_AA$data[[i]]$Z[j])
)
#assign(i, data.frame(split(dat[[i]], rep(letters[1:5], each = 3))))
print(distances)
}
}
#
for(i in 2:length(grouped_by_AA$data[[i]]))
{
for (j in 2:length(grouped_by_AA$data[[i+1]]))
{
distances <- matrix(NA, nrow = nrow(grouped_by_AA$data[[i-1]]), ncol = ncol(grouped_by_AA$data[[i]]))
distances[i, j] <- euclidean_distance(
c(grouped_by_AA$data[[i-1]]$X[i], grouped_by_AA$data[[i-1]]$Y[i], grouped_by_AA$data[[i-1]]$Z[i]),
c(grouped_by_AA$data[[i]]$X[j], grouped_by_AA$data[[i]]$Y[j], grouped_by_AA$data[[i]]$Z[j])
)
#assign(i, data.frame(split(dat[[i]], rep(letters[1:5], each = 3))))
print(distances)
}
}
help(max)
max(length(grouped_by_AA$Atom))
max_length <- grouped_by_AA %>%
map_int(~nrow(.)) %>%
max()
# Group the data {use: grouped_by_AA}
location_df <- df[,-3]
grouped_by_AA <- df %>%
group_by(AminoAcid) %>%
nest()
grouped_by_AA
max_length <- grouped_by_AA %>%
map_int(~nrow(.)) %>%
max()
max_length <- grouped_by_AA %>%
map_int(nrow(.)) %>%
max()
max_length_all_columns <- grouped_by_AA %>%
map_dbl(~max(sapply(., nrow)))
rlang::last_trace()
rlang::last_trace(drop = FALSE)
max_length_col1 <- grouped_by_AA %>%
map_int(~length(.$col2)) %>% # Get the number of rows (length of col1) for each dataframe
max() # Find the maximum of those lengths
max_length_col1 <- grouped_by_AA %>%
map_int(~length(.$Atom)) %>% # Get the number of rows (length of col1) for each dataframe
max() # Find the maximum of those lengths
max_length_col1 <- grouped_by_AA %>%
map_int(~length(,2)) %>% # Get the number of rows (length of col1) for each dataframe
max() # Find the maximum of those lengths
max_length_col1 <- grouped_by_AA %>%
map_int(~length(2)) %>% # Get the number of rows (length of col1) for each dataframe
max() # Find the maximum of those lengths
max_length <- grouped_by_AA %>%
map_int(~length(2)) %>% # Get the number of rows (length of col1) for each dataframe
max() # Find the maximum of those lengths
max_length
help(mutate)
# Group the data {use: grouped_by_AA}
location_df <- df[,-3]
grouped_by_AA <- df %>%
group_by(AminoAcid) %>%
nest()
grouped_by_AA
grouped_by_AA$data[[2]]
# How to use just one dataframe:
length(grouped_by_AA$data[[2]])
# How to use just one dataframe:
length(grouped_by_AA$data[2])
# How to use just one dataframe:
nrows(grouped_by_AA$data[[2]])
# How to use just one dataframe:
nrow(grouped_by_AA$data[[2]])
# Looping through each dataframe to get distance matrices
for(i in 2:nrow(grouped_by_AA$data[[i]]))
{
for (j in 2:nrow(grouped_by_AA$data[[i+1]]))
{
distances <- matrix(NA, nrow = nrow(grouped_by_AA$data[[i-1]]), ncol = ncol(grouped_by_AA$data[[i]]))
distances[i, j] <- euclidean_distance(
c(grouped_by_AA$data[[i-1]]$X[i], grouped_by_AA$data[[i-1]]$Y[i], grouped_by_AA$data[[i-1]]$Z[i]),
c(grouped_by_AA$data[[i]]$X[j], grouped_by_AA$data[[i]]$Y[j], grouped_by_AA$data[[i]]$Z[j])
)
#assign(i, data.frame(split(dat[[i]], rep(letters[1:5], each = 3))))
print(distances)
}
}
max_length <- grouped_by_AA %>%
map_int(~length(2)) %>% # Get the number of rows (length of col1) for each dataframe
max() # Find the maximum of those lengths
max_length
# Outputting wrong
max_length <- grouped_by_AA %>%
map_int(~nrow(2)) %>% # Get the number of rows (length of col1) for each dataframe
max() # Find the maximum of those lengths
max_length <- grouped_by_AA %>%
for(i in .)
{
~nrow(grouped_by_AA[[i]]) %>% # Get the number of rows (length of col1) for each dataframe
max() # Find the maximum of those lengths
}
max_length
max_length <- grouped_by_AA %>%
for(i in .)
{
nrow(grouped_by_AA[[i]]) %>% # Get the number of rows (length of col1) for each dataframe
max() # Find the maximum of those lengths
}
nrow(grouped_by_AA$data[[2]])
nrow(grouped_by_AA$data[[1]])
# Outputting wrong
df_lengths <- grouped_by_AA %>%
for(i in .)
{
nrow(grouped_by_AA[[i]]) %>% # Get the number of rows (length of col1) for each dataframe
}
# Outputting wrong
df_lengths <- grouped_by_AA %>%
for(i in .)
{
nrow(grouped_by_AA[[i]]) # Get the number of rows (length of col1) for each dataframe
}
longest_column_in_df <- function(df) {
map_dbl(df, ~ max(stringr::str_length(.)))
}
max_lengths_per_df <- map(grouped_by_AA, longest_column_in_df)
library(stringr)
longest_column_in_df <- function(df) {
map_dbl(df, ~ max(stringr::str_length(.)))
}
max_lengths_per_df <- map(grouped_by_AA, longest_column_in_df)
df <- data.frame(
AA <- c("AA1", "AA1", "AA1", "AA2", "AA2", "AA3", "AA3", "AA3"),
Atom <- c("a1", "a2", "a3", "a1", "a2", "a1", "a2", "a3"),
Mut <- c(TRUE, FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, TRUE), # I don't know how mutations are indicated right now
x <- c(3, 4, 5, 4, 7, 2, 8, 5),
y <- c(7, 9, 3, 7, 5, 7, 2, 4),
z <- c(2, 8, 1, 6, 9, 3, 1, 7)
)
colnames(df) <- c("AminoAcid", "Atom", "Mutation?", "X", "Y", "Z")
df
# Find distance between every 2 amino acids:
# Group the data {use: grouped_by_AA}
location_df <- df[,-3]
grouped_by_AA <- df %>%
group_by(AminoAcid) %>%
nest()
# Euclidean function {use: euclidean_distance[i, j] }
euclidean_distance <- function(point1, point2) {
sqrt(sum((point1 - point2)^2))
}
# Looping through each dataframe to get distance matrices
for(i in 2:nrow(grouped_by_AA$data[[i]]))
{
for (j in 2:nrow(grouped_by_AA$data[[i+1]]))
{
distances <- matrix(NA, nrow = nrow(grouped_by_AA$data[[i-1]]), ncol = ncol(grouped_by_AA$data[[i]]))
distances[i, j] <- euclidean_distance(
c(grouped_by_AA$data[[i-1]]$X[i], grouped_by_AA$data[[i-1]]$Y[i], grouped_by_AA$data[[i-1]]$Z[i]),
c(grouped_by_AA$data[[i]]$X[j], grouped_by_AA$data[[i]]$Y[j], grouped_by_AA$data[[i]]$Z[j])
)
#assign(i, data.frame(split(dat[[i]], rep(letters[1:5], each = 3))))
print(distances)
}
}
# ---------- Libraries ----------
if(!require(dplyr)){install.packages("dplyr")}
if(!require(dplyr)){install.packages("tidyverse")}
if(!require(dplyr)){install.packages("purrr")}
library(tidyverse)
library(dplyr)
library(purrr)
library(stringr)
# Group the data {use: grouped_by_AA}
location_df <- df[,-3]
grouped_by_AA <- df %>%
group_by(AminoAcid) %>%
nest()
grouped_by_AA
# Looping through each dataframe to get distance matrices
for(i in 2:nrow(grouped_by_AA$data[[i]]))
{
for (j in 2:nrow(grouped_by_AA$data[[i+1]]))
{
distances <- matrix(NA, nrow = nrow(grouped_by_AA$data[[i-1]]), ncol = ncol(grouped_by_AA$data[[i]]))
distances[i, j] <- euclidean_distance(
c(grouped_by_AA$data[[i-1]]$X[i], grouped_by_AA$data[[i-1]]$Y[i], grouped_by_AA$data[[i-1]]$Z[i]),
c(grouped_by_AA$data[[i]]$X[j], grouped_by_AA$data[[i]]$Y[j], grouped_by_AA$data[[i]]$Z[j])
)
#assign(i, data.frame(split(dat[[i]], rep(letters[1:5], each = 3))))
print(distances)
}
}
grouped_by_AA
location_df <- df[,-3]
grouped_by_AA <- df %>%
group_by(AminoAcid) %>%
grouped_by_AA
location_df <- df[,-3]
grouped_by_AA <- df %>%
group_by(AminoAcid) %>%
grouped_by_AA
# ---------- Libraries ----------
if(!require(dplyr)){install.packages("dplyr")}
if(!require(dplyr)){install.packages("tidyverse")}
if(!require(dplyr)){install.packages("purrr")}
library(tidyverse)
library(dplyr)
library(purrr)
library(stringr)
# Create a fake data frame for testing
df <- data.frame(
AA <- c("AA1", "AA1", "AA1", "AA2", "AA2", "AA3", "AA3", "AA3"),
Atom <- c("a1", "a2", "a3", "a1", "a2", "a1", "a2", "a3"),
Mut <- c(TRUE, FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, TRUE), # I don't know how mutations are indicated right now
x <- c(3, 4, 5, 4, 7, 2, 8, 5),
y <- c(7, 9, 3, 7, 5, 7, 2, 4),
z <- c(2, 8, 1, 6, 9, 3, 1, 7)
)
colnames(df) <- c("AminoAcid", "Atom", "Mutation?", "X", "Y", "Z")
df
location_df <- df[,-3]
grouped_by_AA <- df %>%
group_by(AminoAcid) %>%
grouped_by_AA
# ---------- Libraries ----------
if(!require(dplyr)){install.packages("dplyr")}
if(!require(dplyr)){install.packages("tidyverse")}
if(!require(dplyr)){install.packages("purrr")}
library(tidyverse)
library(dplyr)
library(purrr)
library(stringr)
